<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gla-yolanda.github.io</id>
    <title>Gridea</title>
    <updated>2020-03-14T12:02:18.678Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gla-yolanda.github.io"/>
    <link rel="self" href="https://gla-yolanda.github.io/atom.xml"/>
    <subtitle>「献给许许多多的的祭日.」</subtitle>
    <logo>https://gla-yolanda.github.io/images/avatar.png</logo>
    <icon>https://gla-yolanda.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[1D/1D动态优化]]></title>
        <id>https://gla-yolanda.github.io/post/1d1d-dong-tai-you-hua/</id>
        <link href="https://gla-yolanda.github.io/post/1d1d-dong-tai-you-hua/">
        </link>
        <updated>2020-03-14T10:10:54.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>经典模型一</li>
</ul>
<p>-决策单调性——四边形不等式<br>
<img src="https://gla-yolanda.github.io/post-images/1584185201960.png" alt="" loading="lazy"></p>
<p>-设k(x)表示到状态x取到最优质的决策，那么：<br>
<img src="https://gla-yolanda.github.io/post-images/1584182196714.png" alt="" loading="lazy"></p>
<ul>
<li>如何利用这个性质？</li>
<li>沿着&quot;f(x)的最优决策是什么&quot;这个思路，换一个角度，对于一个已经计算出来的f(j)，“f(j)能更新的状态有哪些”</li>
<li>一开始只有f(1)计算出来，所有状态的最优决策都是1<br>
1111111111111111111111111111</li>
<li>当f(2)计算出来后，有些决策换成了2，由于决策单调性，必然如下<br>
1111112222222222222222222222</li>
<li>当f(3)计算出来后，有些决策换成了3，由于决策单调性，必然如下<br>
1111112222222233333333333333<br>
1111333333333333333333333333</li>
<li>绝不可能如下<br>
1111113333333333333322222222</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>经典模型一</li>
</ul>
<p>-决策单调性——四边形不等式<br>
<img src="https://gla-yolanda.github.io/post-images/1584185201960.png" alt="" loading="lazy"></p>
<p>-设k(x)表示到状态x取到最优质的决策，那么：<br>
<img src="https://gla-yolanda.github.io/post-images/1584182196714.png" alt="" loading="lazy"></p>
<ul>
<li>如何利用这个性质？</li>
<li>沿着&quot;f(x)的最优决策是什么&quot;这个思路，换一个角度，对于一个已经计算出来的f(j)，“f(j)能更新的状态有哪些”</li>
<li>一开始只有f(1)计算出来，所有状态的最优决策都是1<br>
1111111111111111111111111111</li>
<li>当f(2)计算出来后，有些决策换成了2，由于决策单调性，必然如下<br>
1111112222222222222222222222</li>
<li>当f(3)计算出来后，有些决策换成了3，由于决策单调性，必然如下<br>
1111112222222233333333333333<br>
1111333333333333333333333333</li>
<li>绝不可能如下<br>
1111113333333333333322222222</li>
</ul>
<!-- more -->
<ul>
<li>可以用“栈加二分”来确定决策</li>
<li>栈中每个元素保存一个决策的起始位置和终止位置，显然这些位置相互连接并且依次递增。当插入一个决策的起始位置和终止位置，显然这些位置相互连接并且依次递增。当插入一个新决策时，从后到前扫描栈，对于一个老决策来说，要做这两件事情</li>
</ul>
<ol>
<li>如果在老决策的起点处还是新决策好，则退栈，抛弃所有老决策，将其合并到新决策中，继续扫描下一个决策</li>
<li>如果在老决策的起点处是老决策好，则转折点必然在这个老决策的区间里；二分查找之，然后新决策进栈，结束<br>
由于一个决策出栈后再也不会进入，所以均摊时间为O(1)，但是由于二分查找的存在，所以整个算法的时间复杂度为O(nlogn)</li>
</ol>
<!-- more -->
<ul>
<li>例题【HNOI2008】玩具装箱     咕咕咕</li>
</ul>
<!-- more -->
<!-- more -->
<ul>
<li>经典模型1-extra</li>
<li>考虑一种特别的w函数： i≤j&lt;k,w[i,j]+w[j,k]=w[i,k],显然满足决策单调性。由于函数的特殊性，可以用更简洁的方法解决。</li>
<li>由于w函数的特点，必然存在w'函数：i≤j,w[i,j]=w'[j]-w'[i]</li>
<li>对于f(x)的决策k，有：f(x)=f(k)+w'[x]-w'[k]=g(k)+w'[x]-w'[1]   其中g(k)=f(k)-w[1,k]</li>
<li>由于w'[x]-w'[1]是常数，所以有：f(x)=min g(k) +w[1,x]</li>
<li>打擂台即可求出 min g(k)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[状压DP]]></title>
        <id>https://gla-yolanda.github.io/post/zhuang-ya-dp/</id>
        <link href="https://gla-yolanda.github.io/post/zhuang-ya-dp/">
        </link>
        <updated>2020-03-07T10:10:30.000Z</updated>
        <content type="html"><![CDATA[<p>状压DP特点</p>
<ul>
<li>数据某一位或某几位数据较小</li>
<li>需要具备无后效性和最优子问题</li>
</ul>
<p>常见二进制操作</p>
<ul>
<li>求交集 i&amp;j</li>
<li>求并集 i|j</li>
<li>判断k在不在集合i中 if(i&amp;(i&lt;&lt;k))</li>
<li>增加k i|=(1&lt;&lt;k)</li>
<li>第k位取反 (原有就是去掉) i^=(1&lt;&lt;k)</li>
<li>去掉集合i的最后一个1 i&amp;=(i-1) or i-=(-i)</li>
<li>判断是否只有一个元素 if(i==i&amp;(-i))</li>
<li>枚举子集 for(int i=0;s=1&lt;&lt;n;i&lt;s;++i)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树形DP]]></title>
        <id>https://gla-yolanda.github.io/post/shu-xing-dp/</id>
        <link href="https://gla-yolanda.github.io/post/shu-xing-dp/">
        </link>
        <updated>2020-02-29T10:01:25.000Z</updated>
        <content type="html"><![CDATA[<p>觉得这篇写得比较能看，所以发出来顺带测试一下效果</p>
<p>顾名思义：在“树”的数据结构上做动态规划<br>
书上的父子关系天然就是递归结构，相应有两个方向<br>
常用：叶子-&gt;根：子节点传递有用的信息给根，之后由根求出最优解<br>
动态规划顺序：后序遍历<br>
实现方式：记忆化搜索<br>
代码复杂度：O(n)</p>
<p>例一：树的重心<br>
解法<br>
任选一个根，把无根树变成有根树<br>
设f[i]表示以i为根的子树的结点个数<br>
显然有：<img src="https://gla-yolanda.github.io/post-images/1582979660844.gif" alt="" loading="lazy"><br>
一遍dfs的过程中直接计算即可<br>
对于每个结点i，删除这个点后最大连通块的结点数为：max{n-f[i],max f[j]}</p>
<p>例二：树的最长路径<br>
解法<br>
只需求出每个结点为根的子树中的最长链，取其中的最大值即可<br>
设发f[i]标赛以i为根的子树中，i到叶子结点的距离的最大值，g[i]表示以i为根的子树中i到叶子结点的距离的次大值</p>
<p>令j是i的儿子，则：<br>
1.若f[i]+dis[i][j]&gt;f[i],则g[i]=f[i];f[i]=f[j]+dis[i][j];<br>
2.否则，若f[i]+dis[i][j]&gt;g[i],则g[i]=f[j]+dis[i][j];<br>
答案为max(f[i]+g[i]);</p>
<p>例三：树的中心<br>
一句话题意：找出树中最长距离最短点<br>
解法<br>
从任何一点i出发的最长距离，可能出现如下的情况<br>
1.往下走，设终点在以i为根的子树中的最长距离为f[i]<br>
2.往上走，设终点不在以i为根的子树中的最长距离为u[i]<br>
答案是max(f[i],u[i])</p>
<p>提供计算u[i]的做法<br>
类似上一个问题，设终点在以i为根的子树中的次长距离为g[i]，同时用c[i],d[i]，分别记录f[i],g[i]是从哪个儿子转移过来的<br>
令j是i的儿子，则：<br>
1.若f[j]+dis[i][j]&gt;f[i]，则g[i]=f[i];f[i]=f[j]+dis[i][j];d[i]=c[i];c[i]=[j];<br>
2.否则，若f[j]+dis[i][j]&gt;g[i]，则g[i]=f[j]+dis[i][j];d[i]=j;</p>
<p>令i是x的儿子，则：<br>
1.若c[x]≠i,则u[i]=max(u[x],f[x])+dis[i][x]<br>
2.若c[x]=i,则u[i]=max(u[x],g[x])+dis[i][x]</p>
<p>例四：树的最大独立集<br>
一句话题意：对于一棵n个结点的树，选出最少的结点，使得所有的边至少有一个端点在选出的集合中</p>
<p>解法<br>
f[i][0]表示不取i结点的情况下，以i为根的子树中至少要选的节点数<br>
f[i][1]表示取i结点的情况下，以i为根的子树中至少要选的结点数<br>
<img src="https://gla-yolanda.github.io/post-images/1582979505057.gif" alt="" loading="lazy"><br>
<img src="https://gla-yolanda.github.io/post-images/1582979461463.gif" alt="" loading="lazy"><br>
答案是max(f[root][1],f[root][0]);</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Test]]></title>
        <id>https://gla-yolanda.github.io/post/test/</id>
        <link href="https://gla-yolanda.github.io/post/test/">
        </link>
        <updated>2020-02-26T04:34:11.000Z</updated>
        <content type="html"><![CDATA[<p>我爱你！╰(￣ω￣ｏ)</p>
]]></content>
    </entry>
</feed>